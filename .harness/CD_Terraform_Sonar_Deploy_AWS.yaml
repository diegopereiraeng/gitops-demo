pipeline:
  name: CD - Terraform Sonar Deploy AWS
  identifier: CD_Terraform_Sonar_Deploy_AWS
  projectIdentifier: GIT_FLOW_DEMO
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Check AWS Permissions
        identifier: Check_AWS_Permissions
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Get Latest AMI ID for Amazon Linux 2
                  identifier: Check_AWS
                  spec:
                    connectorRef: account.DockerHubDiego
                    image: amazon/aws-cli:latest
                    shell: Sh
                    command: |+
                      #!/bin/bash
                      LATEST_AMI_ID=$(aws ec2 describe-images \
                          --owners amazon \
                          --filters 'Name=name,Values=amzn2-ami-hvm-2.0.*-x86_64-gp2' 'Name=state,Values=available' \
                          --query 'sort_by(Images, &CreationDate) | [-1].ImageId' \
                          --output text \
                          --region us-east-1)

                      echo "Latest AMI ID: $LATEST_AMI_ID"


                      aws ec2 describe-images --image-ids $LATEST_AMI_ID --region us-east-1


                      aws ec2 describe-image-attribute --image-id $LATEST_AMI_ID --attribute launchPermission --region us-east-1

                    envVariables:
                      AWS_ACCESS_KEY_ID: <+secrets.getValue('AWS_ACCESS_KEY_ID')>
                      AWS_SECRET_ACCESS_KEY: <+secrets.getValue('AWS_SECRET_ACCESS_KEY')>
    - stage:
        name: Deploy Sonar Terraform
        identifier: Deploy_Sonar_Terraform
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: TerraformPlan
                  name: Terraform Plan Deploy Sonar
                  identifier: TerraformPlan_1
                  spec:
                    provisionerIdentifier: sonartf
                    configuration:
                      command: Apply
                      configFiles:
                        store:
                          spec:
                            connectorRef: account.diegogithubapp
                            repoName: terraform-templates
                            gitFetchType: Branch
                            branch: main
                            folderPath: aws/sonar
                          type: Github
                      backendConfig:
                        type: Inline
                        spec:
                          content: |-
                            bucket = "diego-aws-storage"
                            key    = "tf_state_files/sonartf"
                            region = "us-east-2"
                      environmentVariables:
                        - name: AWS_ACCESS_KEY_ID
                          value: <+secrets.getValue('AWS_ACCESS_KEY_ID')>
                          type: String
                        - name: AWS_SECRET_ACCESS_KEY
                          value: <+secrets.getValue('AWS_SECRET_ACCESS_KEY')>
                          type: String
                      secretManagerRef: harnessSecretManager
                      workspace: prod
                      exportTerraformHumanReadablePlan: true
                      skipRefreshCommand: false
                  timeout: 10m
              - step:
                  type: TerraformApply
                  name: Terraform Apply Deploy Sonar
                  identifier: Terraform_Apply_Deploy_Sonar
                  spec:
                    provisionerIdentifier: sonartf
                    configuration:
                      type: InheritFromPlan
                  timeout: 10m
        tags: {}
