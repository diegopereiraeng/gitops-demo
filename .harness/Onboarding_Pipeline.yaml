pipeline:
  name: Onboarding Pipeline
  identifier: Onboarding_Pipeline
  projectIdentifier: GIT_FLOW_DEMO
  orgIdentifier: default
  description: Configure your demo environment in 2 minutes
  tags:
    owner: diego
    latam: ""
    banking-demo: ""
  stages:
    - stage:
        name: Banking Validation Demo Onboarding
        identifier: Automation
        description: Configure your demo env in 2 minutes with Terraform and Harness APIs
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Export SLOs Templates
                  identifier: Export_SLOs_Templates
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |
                          cat <<EOF > slo_auth_errors.json
                          {
                            "orgIdentifier": "default",
                            "projectIdentifier": "GIT_FLOW_DEMO",
                            "identifier": "Authorization_Error_Rate",
                            "name": "Authorization Error Rate",
                            "tags": {},
                            "userJourneyRef": "Payments",
                            "monitoredServiceRef": "paymentsvalidationdiegopereiraeng_prod",
                            "healthSourceRef": "promprod",
                            "type": "Availability",
                            "serviceLevelIndicators": [
                              {
                                "name": "Authorization_Error_Rate_Authorization_Error_Rate",
                                "identifier": "Authorization_Error_Rate_Authorization_Error_Rate",
                                "type": "Availability",
                                "spec": {
                                  "type": "Threshold",
                                  "spec": {
                                    "metric1": "Authorization_Error_Rate",
                                    "thresholdValue": 20,
                                    "thresholdType": "<="
                                  }
                                },
                                "sliMissingDataType": "Good"
                              }
                            ],
                            "target": {
                              "type": "Rolling",
                              "sloTargetPercentage": 95,
                              "spec": {
                                "periodLength": "1d"
                              }
                            },
                            "notificationRuleRefs": []
                          }
                          EOF

                          cat <<EOF > slo_auth_rt.json
                          {
                            "orgIdentifier": "default",
                            "projectIdentifier": "GIT_FLOW_DEMO",
                            "identifier": "Authorization_Response_Time",
                            "name": "Authorization Response Time",
                            "tags": {},
                            "userJourneyRef": "Payments",
                            "monitoredServiceRef": "paymentsvalidationdiegopereiraeng_prod",
                            "healthSourceRef": "promprod",
                            "type": "Latency",
                            "serviceLevelIndicators": [
                              {
                                "name": "Authorization_Response_Time_Authorization_Response_Time",
                                "identifier": "Authorization_Response_Time_Authorization_Response_Time",
                                "type": "Latency",
                                "spec": {
                                  "type": "Threshold",
                                  "spec": {
                                    "metric1": "Authorization_Response_Time",
                                    "thresholdValue": 2,
                                    "thresholdType": "<="
                                  }
                                },
                                "sliMissingDataType": "Good"
                              }
                            ],
                            "target": {
                              "type": "Rolling",
                              "sloTargetPercentage": 95,
                              "spec": {
                                "periodLength": "1d"
                              }
                            },
                            "notificationRuleRefs": []
                          }
                          EOF

                          cat <<EOF > slo_val_errors.json
                          {
                            "orgIdentifier": "default",
                            "projectIdentifier": "GIT_FLOW_DEMO",
                            "identifier": "Validation_Process_Error_Rate_Diego",
                            "name": "Validation Process Error Rate - Diego",
                            "tags": {},
                            "userJourneyRef": "Payments",
                            "monitoredServiceRef": "paymentsvalidationdiegopereiraeng_prod",
                            "healthSourceRef": "promprod",
                            "type": "Availability",
                            "serviceLevelIndicators": [
                              {
                                "name": "Validation_Process_Error_Rate_Diego_Validation_Process_Error_Rate",
                                "identifier": "Validation_Process_Error_Rate_Diego_Validation_Process_Error_Rate",
                                "type": "Availability",
                                "spec": {
                                  "type": "Threshold",
                                  "spec": {
                                    "metric1": "Validation_Process_Error_Rate",
                                    "thresholdValue": 20,
                                    "thresholdType": "<="
                                  }
                                },
                                "sliMissingDataType": "Good"
                              }
                            ],
                            "target": {
                              "type": "Rolling",
                              "sloTargetPercentage": 80,
                              "spec": {
                                "periodLength": "1d"
                              }
                            },
                            "notificationRuleRefs": []
                          }
                          EOF

                          cat <<EOF > slo_val_rt.json
                          {
                            "orgIdentifier": "default",
                            "projectIdentifier": "GIT_FLOW_DEMO",
                            "identifier": "Payment_Process_Response_Time",
                            "name": "Validation Process Response Time",
                            "tags": {},
                            "userJourneyRef": "Payments",
                            "monitoredServiceRef": "paymentsvalidationdiegopereiraeng_prod",
                            "healthSourceRef": "promprod",
                            "type": "Latency",
                            "serviceLevelIndicators": [
                              {
                                "name": "Payment_Process_Response_Time_Validation_Process_Response_Time",
                                "identifier": "Payment_Process_Response_Time_Validation_Process_Response_Time",
                                "type": "Latency",
                                "spec": {
                                  "type": "Threshold",
                                  "spec": {
                                    "metric1": "Validation_Process_Response_Time",
                                    "thresholdValue": 1.2,
                                    "thresholdType": "<="
                                  }
                                },
                                "sliMissingDataType": "Good"
                              }
                            ],
                            "target": {
                              "type": "Rolling",
                              "sloTargetPercentage": 95,
                              "spec": {
                                "periodLength": "1d"
                              }
                            },
                            "notificationRuleRefs": []
                          }
                          EOF

                          cat slo_auth_errors.json

                          export slo_auth_errors=`cat slo_auth_errors.json`
                          export slo_auth_rt=`cat slo_auth_rt.json`
                          export slo_val_errors=`cat slo_val_errors.json`
                          export slo_val_rt=`cat slo_val_rt.json`

                          export gcp_sa=`hello intruder`
                    environmentVariables: []
                    outputVariables:
                      - name: slo_auth_errors
                        type: String
                        value: slo_auth_errors
                      - name: slo_auth_rt
                        type: String
                        value: slo_auth_rt
                      - name: slo_val_errors
                        type: String
                        value: slo_val_errors
                      - name: slo_val_rt
                        type: String
                        value: slo_val_rt
                      - name: gcp_sa
                        type: String
                        value: gcp_sa
                    delegateSelectors:
                      - cd-demo-se
                  timeout: 10m
                  failureStrategies: []
              - step:
                  type: TerraformApply
                  name: Create DNS Record
                  identifier: Create_DNS_Record
                  spec:
                    provisionerIdentifier: tfdns<+pipeline.variables.gitUser>
                    configuration:
                      type: Inline
                      spec:
                        configFiles:
                          store:
                            type: Github
                            spec:
                              gitFetchType: Branch
                              connectorRef: account.diegogithubapp
                              repoName: terraform-onboarding-payments-validation
                              branch: main
                              folderPath: banking-demo-dns
                        environmentVariables:
                          - name: GOOGLE_CREDENTIALS
                            value: <+secrets.getValue("diego_gc_sa_text")>
                            type: String
                        varFiles:
                          - varFile:
                              spec:
                                content: |-
                                  project="sales-209522"
                                  region="us-central1-c"
                                  gitUser="<+pipeline.variables.gitUser>"
                                  ipAddress="34.121.101.100"
                              identifier: vars
                              type: Inline
                  timeout: 10m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
              - stepGroup:
                  name: Service and Environment Creation
                  identifier: Service_and_Environment_Creation
                  steps:
                    - step:
                        type: TerraformPlan
                        name: Terraform Plan
                        identifier: Terraform_Plan
                        spec:
                          configuration:
                            command: Apply
                            configFiles:
                              store:
                                type: Github
                                spec:
                                  gitFetchType: Branch
                                  connectorRef: account.diegogithubapp
                                  repoName: terraform-onboarding-payments-validation
                                  branch: main
                                  folderPath: banking-demo-onboarding/
                            secretManagerRef: account.harnessSecretManager
                            targets:
                              - harness_platform_service.new_service
                              - harness_platform_environment.se-env
                            varFiles:
                              - varFile:
                                  identifier: vars
                                  spec:
                                    content: |-
                                      orgId = "default"
                                      projectId = "GIT_FLOW_DEMO"
                                      gitUser = "<+pipeline.variables.gitUser>"
                                      accId = "6_vVHzo9Qeu9fXvj-AcbCQ"
                                      apiKey = "<+secrets.getValue("diegopatharness")>"
                                  type: Inline
                            exportTerraformPlanJson: true
                            exportTerraformHumanReadablePlan: true
                          provisionerIdentifier: tf<+pipeline.variables.gitUser>
                        timeout: 10m
                        failureStrategies:
                          - onFailure:
                              errors:
                                - AllErrors
                              action:
                                type: Retry
                                spec:
                                  retryCount: 9
                                  onRetryFailure:
                                    action:
                                      type: ManualIntervention
                                      spec:
                                        timeout: 5m
                                        onTimeout:
                                          action:
                                            type: Abort
                                  retryIntervals:
                                    - 5s
                    - step:
                        type: TerraformApply
                        name: Terraform Apply
                        identifier: TerraformApply2
                        spec:
                          configuration:
                            type: InheritFromPlan
                          provisionerIdentifier: tf<+pipeline.variables.gitUser>
                        timeout: 10m
                        failureStrategies:
                          - onFailure:
                              errors:
                                - AllErrors
                              action:
                                type: Retry
                                spec:
                                  retryCount: 9
                                  onRetryFailure:
                                    action:
                                      type: ManualIntervention
                                      spec:
                                        timeout: 5m
                                        onTimeout:
                                          action:
                                            type: Abort
                                  retryIntervals:
                                    - 5s
              - stepGroup:
                  name: Full Automation - Monitored Service - SLOs - Metrics - FF Key
                  identifier: Full_Automation_Monitored_Service_SLOs_Metrics_FF_Key
                  steps:
                    - step:
                        type: ShellScript
                        name: Harness API
                        identifier: Harness_API
                        spec:
                          shell: Bash
                          onDelegate: true
                          source:
                            type: Inline
                            spec:
                              script: |+
                                echo "service id: <+service.identifier>"


                                git_user='<+<+<+pipeline.variables.gitUser>.toLowerCase()>.replaceAll("-","_")>'
                                service_name="payments-validation-$git_user"
                                service_id=`echo payments_validation_$git_user | tr '[:upper:]' '[:lower:]'`
                                acc_id="6_vVHzo9Qeu9fXvj-AcbCQ"
                                org_id="default"
                                project_id="GIT_FLOW_DEMO"
                                env_id=`echo $git_user | tr '[:upper:]' '[:lower:]'`
                                template_applied="false"
                                template_saved="false"
                                slo_created="false"

                                # Template info
                                template_monitored_service="paymentsvalidationdiegopereiraeng_prod"
                                app_metric_name="payments-validation-diegopereiraeng"
                                project_template="GIT_FLOW_DEMO"
                                target_env="prod"
                                # Template info end

                                monit_service=""
                                service_ref=`echo payments_validation_$git_user | tr '[:upper:]' '[:lower:]'`
                                env_ref=`echo $git_user | tr '[:upper:]' '[:lower:]'`


                                response_monit_service_create=`curl -s -o response_monit_service_create.txt -w "%{http_code}" -X POST \
                                'https://app.harness.io/gateway/cv/api/monitored-service/create-default?accountId='$acc_id'&orgIdentifier='$org_id'&projectIdentifier='$project_id'&environmentIdentifier='$target_env'&serviceIdentifier='$service_ref'' \
                                -H 'x-api-key: <+secrets.getValue("diegopatharness")>' -d ""`

                                if [ $response_monit_service_create != "200" ]; then
                                errorCode=`cat response_monit_service_create.txt | jq .code`
                                echo "response_monit_service_create errorCode: $errorCode"
                                if [[ "$errorCode" != "\"DUPLICATE_FIELD\"" ]]; then
                                echo "curl -s -o response_monit_service_create.txt -w "%{http_code}" -X POST \
                                'https://app.harness.io/gateway/cv/api/monitored-service/create-default?accountId='$acc_id'&orgIdentifier='$org_id'&projectIdentifier='$project_id'&environmentIdentifier='$target_env'&serviceIdentifier='$service_ref'' \
                                -H 'x-api-key: <+secrets.getValue("diegopatharness")>' -d \"\""
                                cat response_monit_service_create.txt
                                exit 1
                                else
                                http_get_monit_svc_response=`curl -s -o http_get_monit_svc_response.txt -w "%{http_code}" -H 'x-api-key: <+secrets.getValue("diegopatharness")>' -s -o response.txt -w "%{http_code}" https://app.harness.io/gateway/cv/api/monitored-service/$service_id\_$target_env\?accountId=$acc_id\&orgIdentifier=$org_id\&projectIdentifier=$project_id`
                                echo "get monit svc status code: $http_get_monit_svc_response"
                                if [ $http_get_monit_svc_response != "200" ]; then
                                echo "error getting monit svc"
                                exit 1
                                else
                                #cat http_get_monit_svc_response.txt
                                monit_service=`cat http_get_monit_svc_response.txt | jq .data.monitoredService | jq .identifier | tr '[:upper:]' '[:lower:]'`
                                echo "monit_service: $monit_service"
                                fi
                                fi
                                else
                                monit_service=`cat response_monit_service_create.txt | jq .resource.monitoredService.identifier | tr '[:upper:]' '[:lower:]'`
                                echo "monit_service: $monit_service"
                                #cat response_monit_service_create.txt | jq .resource.monitoredService.identifier
                                fi


                                export monit_service

                                # response_get_key=`curl -s -o response_key.txt -w "%{http_code}" -X GET \
                                #   "https://app.harness.io/gateway/cf/admin/apikey?accountIdentifier=$acc_id&orgIdentifier=$org_id&environmentIdentifier=$env_id&projectIdentifier=$project_id&pageNumber=0&pageSize=0" \
                                #   -H 'x-api-key: <key>'`

                                response_get_key=`curl -s -o response_key.txt -w "%{http_code}" -X GET \
                                  "https://app.harness.io/gateway/cf/admin/apikey/$git_user?accountIdentifier=$acc_id&orgIdentifier=$org_id&environmentIdentifier=$env_id&projectIdentifier=$project_id" \
                                  -H 'x-api-key: <+secrets.getValue("diegopatharness")>'`

                                if [ $response_get_key == "200" ]; then
                                    # keys_count=`cat response_key.txt | jq .itemCount`
                                    # echo "api keys found: $keys_count"
                                    # if [[ $keys_count -ne 0 ]]; then
                                        # handle error
                                        echo "key already exist,deleting..."
                                        response_delete_key=`curl -s -o response_delete_key.txt -w "%{http_code}" -X DELETE \
                                        'https://app.harness.io/gateway/cf/admin/apikey/'$git_user'?accountIdentifier='$acc_id'&orgIdentifier='$org_id'&environmentIdentifier='$env_id'&projectIdentifier='$project_id'' \
                                        -H 'x-api-key: <+secrets.getValue("diegopatharness")>'`
                                        if [ $response_delete_key == "200" ]; then
                                        # handle error
                                        echo "key deleted"
                                        else
                                        echo "error: $response_delete_key"
                                        #cat response_delete_key.txt
                                        echo "coudn't delete the key =("
                                        fi
                                        response_delete_key_front=`curl -s -o response_delete_key_front.txt -w "%{http_code}" -X DELETE \
                                        'https://app.harness.io/gateway/cf/admin/apikey/'$git_user'front?accountIdentifier='$acc_id'&orgIdentifier='$org_id'&environmentIdentifier='$env_id'&projectIdentifier='$project_id'' \
                                        -H 'x-api-key: <+secrets.getValue("diegopatharness")>'`
                                        if [ $response_delete_key_front == "200" ]; then
                                        # handle error
                                        echo "key front deleted"
                                        else
                                        echo "error: $response_delete_key_front"
                                        #cat response_delete_key_front.txt
                                        echo "coudn't delete the front key =("
                                        exit 0
                                        fi
                                    # else
                                    #     echo "key doesn't exist"
                                    # fi
                                else
                                    echo "failed to get api key $git_user error: $response_get_key"
                                    cat response_key.txt
                                fi


                                response_create_key=`curl -s -o response_create_key.txt -w "%{http_code}" --location --request POST 'https://app.harness.io/gateway/cf/admin/apikey?accountIdentifier='$acc_id'&orgIdentifier='$org_id'&environmentIdentifier='$env_id'&projectIdentifier='$project_id'' \
                                --header 'Content-Type: application/json' \
                                --header 'x-api-key: <+secrets.getValue("diegopatharness")>' \
                                --header 'Cookie: _cfuvid=JgMXvkM44fH_Jc6B7n0hEVubOkB9vRCmQuxpBJekEP0-1670979409875-0-604800000' \
                                --data-raw '{ 
                                    "description": "This key is for server side production environment",
                                    "expiredAt": 0,
                                    "identifier": "'$git_user'",
                                    "name": "'$git_user'",
                                    "type": "Server"
                                  }'`


                                if [ $response_create_key == "201" ]; then
                                    cat response_create_key.txt
                                    export apiKey=`cat response_create_key.txt | jq .apiKey`
                                    echo "api key generated with sucess - $apiKey"
                                else
                                    echo "coudn't generate an api key =("
                                    exit 1
                                fi


                                response_create_key_front=`curl -s -o response_create_key_front.txt -w "%{http_code}" --location --request POST 'https://app.harness.io/gateway/cf/admin/apikey?accountIdentifier='$acc_id'&orgIdentifier='$org_id'&environmentIdentifier='$env_id'&projectIdentifier='$project_id'' \
                                --header 'Content-Type: application/json' \
                                --header 'x-api-key: <+secrets.getValue("diegopatharness")>' \
                                --header 'Cookie: _cfuvid=JgMXvkM44fH_Jc6B7n0hEVubOkB9vRCmQuxpBJekEP0-1670979409875-0-604800000' \
                                --data-raw '{ 
                                    "description": "This key is for server side production environment",
                                    "expiredAt": 0,
                                    "identifier": "'$git_user'front",
                                    "name": "'$git_user'front",
                                    "type": "Client"
                                  }'`


                                if [ $response_create_key_front == "201" ]; then
                                    cat response_create_key_front.txt
                                    export apiKeyFront=`cat response_create_key_front.txt | jq .apiKey`
                                    echo "front api key generated with sucess - $apiKeyFront"
                                else
                                    echo "coudn't generate an front api key =("
                                    exit 1
                                fi

                                http_response_template=`curl -H 'x-api-key: <+secrets.getValue("diegopatharness")>' -s -o response_template.txt -w "%{http_code}" https://app.harness.io/gateway/cv/api/monitored-service/$template_monitored_service\?accountId=$acc_id\&orgIdentifier=$org_id\&projectIdentifier=$project_template`

                                echo "Template Monitored service return code: ${http_response_template}"

                                template=""

                                if [ $http_response_template != "200" ]; then
                                    echo "error getting template"
                                    exit 1
                                else
                                    #cat response_template.txt
                                    echo "first jq"
                                    template=`cat response_template.txt | jq .data.monitoredService | jq "(.orgIdentifier?) = \"$org_id\"" | jq "(.projectIdentifier?) = \"$project_id\"" | jq  "(.identifier?) = $monit_service" | jq "(.name?) = $monit_service" | jq "(.environmentRef?) = \"$target_env\"" | jq "(.serviceRef?) = \"$service_ref\"" | jq "(.environmentRefList[] | .) = \"$target_env\"" | sed  "s/$app_metric_name/${service_name}/g"`
                                    echo "jq to template"
                                    
                                    export new_svc=$template
                                    echo "Monitored service template applied with success"
                                    template_applied="true"
                                fi
                                echo "json start"

                                echo "json end"
                                if [ $template_applied == "true" ]; then
                                    monit_service=`echo $monit_service | sed  's/\"//g'`
                                    echo "Saving Configured Monitored Service in Harness..."
                                    echo "monit service: $monit_service"
                                    #echo "URL to Save: curl -s -o response_monitored_service_created.txt -w \"%{http_code}\" PUT \"https://app.harness.io/gateway/cv/api/monitored-service/$monit_service?accountId=$acc_id\""
                                    response_monitored_service_created=`curl -H 'x-api-key: <+secrets.getValue("diegopatharness")>' -H 'Content-Type: application/json' -s -o response_monitored_service_created.txt -w "%{http_code}" --location --request PUT https://app.harness.io/gateway/cv/api/monitored-service/$monit_service?accountId=$acc_id \
                                    --data "$template"`

                                    echo "Save Status Code: $response_monitored_service_created"
                                    
                                    cat response_monitored_service_created.txt
                                    template_saved="true"
                                fi

                                echo "org: $org_id"
                                echo "project: $project_id"
                                echo "monit svc: $monit_service"
                                echo "gitUSer: $git_user"
                                echo "user ff env: $env_ref"
                                echo "target deploy env: $target_env"


                                cat <<EOF > slo_auth_errors.json
                                <+pipeline.stages.Automation.spec.execution.steps.Export_SLOs_Templates.output.outputVariables.slo_auth_errors>
                                EOF

                                cat <<EOF > slo_auth_rt.json
                                <+pipeline.stages.Automation.spec.execution.steps.Export_SLOs_Templates.output.outputVariables.slo_auth_rt>
                                EOF

                                cat <<EOF > slo_val_errors.json
                                <+pipeline.stages.Automation.spec.execution.steps.Export_SLOs_Templates.output.outputVariables.slo_val_errors>
                                EOF

                                cat <<EOF > slo_val_rt.json
                                <+pipeline.stages.Automation.spec.execution.steps.Export_SLOs_Templates.output.outputVariables.slo_val_rt>
                                EOF

                                echo "Creating SLOs"
                                echo "1#"
                                slo_auth_errors=`cat slo_auth_errors.json | sed  "s/&gt;/>/g" | sed  "s/&lt;/</g" | jq "(.orgIdentifier?) = \"$org_id\"" | jq "(.projectIdentifier?) = \"$project_id\"" | jq "(.monitoredServiceRef?) = \"$monit_service\"" |  jq  "(.name?) = \"Authorization Error Rate - $git_user\"" |  jq  "(.identifier?) = \"Authorization_Error_Rate_$git_user\"" | jq  "(.serviceLevelIndicators[].identifier) = \"Authorization_Error_Rate_$git_user\""`

                                echo "$slo_auth_errors"

                                echo "2#"
                                slo_auth_rt=`cat slo_auth_rt.json |sed  "s/&gt;/>/g" | sed  "s/&lt;/</g" | jq "(.orgIdentifier?) = \"$org_id\"" | jq "(.projectIdentifier?) = \"$project_id\"" | jq "(.monitoredServiceRef?) = \"$monit_service\"" |  jq  "(.name?) = \"Authorization Response Time - $git_user\"" | jq  "(.identifier?) = \"Authorization_Response_Time_$git_user\"" | jq  "(.serviceLevelIndicators[].identifier) = \"Authorization_Response_Time_$git_user\"" `
                                echo "3#"
                                slo_val_errors=`cat slo_val_errors.json |sed  "s/&gt;/>/g" | sed  "s/&lt;/</g" | jq "(.orgIdentifier?) = \"$org_id\"" | jq "(.projectIdentifier?) = \"$project_id\"" | jq "(.monitoredServiceRef?) = \"$monit_service\"" |  jq  "(.name?) = \"Validation Process Error Rate - $git_user\"" | jq  "(.identifier?) = \"Validation_Process_Error_Rate_$git_user\"" | jq  "(.serviceLevelIndicators[].identifier) = \"Validation_Process_Error_Rate_$git_user\""`
                                echo "4#"
                                slo_val_rt=`cat slo_val_rt.json |sed  "s/&gt;/>/g" | sed  "s/&lt;/</g" | jq "(.orgIdentifier?) = \"$org_id\"" | jq "(.projectIdentifier?) = \"$project_id\"" | jq "(.monitoredServiceRef?) = \"$monit_service\"" |  jq  "(.name?) = \"Validation Process Response Time - $git_user\"" | jq  "(.identifier?) = \"Validation_Process_Response_Time_$git_user\"" | jq  "(.serviceLevelIndicators[].identifier) = \"Validation_Process_Response_Time_$git_user\""`


                                if [ $template_saved == "true" ]; then
                                    response_slo_auth_errors=`curl -s -o response_slo_auth_errors.txt -w "%{http_code}" -X POST \
                                    'https://app.harness.io/gateway/cv/api/slo?accountId='$acc_id'' \
                                    -H 'Content-Type: application/json' \
                                    -H 'x-api-key: <+secrets.getValue("diegopatharness")>' \
                                    -d "$slo_auth_errors"`

                                    echo "SLO Status Code: $response_slo_auth_errors"

                                    if [[ $response_slo_auth_errors != "200" && $response_slo_auth_errors != "400" ]]; then
                                    echo "error creating SLO"
                                    exit 1
                                    fi

                                    response_slo_auth_rt=`curl -s -o response_slo_auth_rt.txt -w "%{http_code}" -X POST \
                                    'https://app.harness.io/gateway/cv/api/slo?accountId='$acc_id'' \
                                    -H 'Content-Type: application/json' \
                                    -H 'x-api-key: <+secrets.getValue("diegopatharness")>' \
                                    -d "$slo_auth_rt"`

                                    if [[ $response_slo_auth_rt != "200" && $response_slo_auth_rt != "400" ]]; then
                                    echo "error creating SLO"
                                    exit 1
                                    fi

                                    response_slo_val_errors=`curl -s -o response_slo_val_errors.txt -w "%{http_code}" -X POST \
                                    'https://app.harness.io/gateway/cv/api/slo?accountId='$acc_id'' \
                                    -H 'Content-Type: application/json' \
                                    -H 'x-api-key: <+secrets.getValue("diegopatharness")>' \
                                    -d "$slo_val_errors"`

                                    if [[ $response_slo_val_errors != "200" && $response_slo_val_errors != "400" ]]; then
                                    echo "error creating SLO"
                                    exit 1
                                    fi

                                    response_slo_val_rt=`curl -s -o response_slo_val_rt.txt -w "%{http_code}" -X POST \
                                    'https://app.harness.io/gateway/cv/api/slo?accountId='$acc_id'' \
                                    -H 'Content-Type: application/json' \
                                    -H 'x-api-key: <+secrets.getValue("diegopatharness")>' \
                                    -d "$slo_val_rt"`

                                    if [[ $response_slo_val_rt != "200" && $response_slo_val_rt != "400" ]]; then
                                    echo "error creating SLO"
                                    exit 1
                                    fi

                                    echo "response auth error: $response_slo_auth_errors"
                                    echo "response auth rt: $response_slo_auth_rt"
                                    echo "response val error: $response_slo_val_errors"
                                    echo "response val rt: $response_slo_val_rt"

                                    enable_monit_svc=`curl -s -o enable_monit_svc.txt -w "%{http_code}" -X PUT "https://app.harness.io/gateway/cv/api/monitored-service/$monit_service/health-monitoring-flag?accountId=$acc_id&orgIdentifier=$org_id&projectIdentifier=$project_id&enable=true" \
                                    -H 'x-api-key: <+secrets.getValue("diegopatharness")>' -d ""`

                                    echo "Enabling Monitored Service Status Code: $response_slo_auth_errors"

                                    if [ $enable_monit_svc != "200" ]; then
                                        echo "error enabling monit svc: $enable_monit_svc"
                                        cat enable_monit_svc.txt
                                        exit 9
                                    fi

                                    echo "Success, you are ready to use Banking Demo"

                                fi


                          environmentVariables: []
                          outputVariables:
                            - name: monit_service
                              type: String
                              value: monit_service
                            - name: new_svc
                              type: String
                              value: new_svc
                            - name: FFApiKey
                              type: String
                              value: apiKey
                            - name: FFApiKeyFront
                              type: String
                              value: apiKeyFront
                          delegateSelectors:
                            - cd-demo-se
                        timeout: 10m
                        failureStrategies: []
              - stepGroup:
                  name: Trigger Creation
                  identifier: Trigger_Creation
                  steps:
                    - step:
                        type: TerraformPlan
                        name: Terraform Plan
                        identifier: TerraformPlan2
                        spec:
                          configuration:
                            command: Apply
                            configFiles:
                              store:
                                type: Github
                                spec:
                                  gitFetchType: Branch
                                  connectorRef: account.diegogithubapp
                                  repoName: terraform-onboarding-payments-validation
                                  branch: main
                                  folderPath: banking-validation-trigger/
                            secretManagerRef: account.harnessSecretManager
                            targets:
                              - harness_platform_triggers.trigger-banking
                            varFiles:
                              - varFile:
                                  identifier: vars
                                  spec:
                                    content: |-
                                      orgId = "default"
                                      projectId = "GIT_FLOW_DEMO"
                                      gitUser = "<+pipeline.variables.gitUser>"
                                      accId = "6_vVHzo9Qeu9fXvj-AcbCQ"
                                      apiKey = "<+secrets.getValue("diegopatharness")>"
                                      ffKeyFront = <+pipeline.stages.Automation.spec.execution.steps.Full_Automation_Monitored_Service_SLOs_Metrics_FF_Key.steps.Harness_API.output.outputVariables.FFApiKeyFront>
                                      ffKey = <+pipeline.stages.Automation.spec.execution.steps.Full_Automation_Monitored_Service_SLOs_Metrics_FF_Key.steps.Harness_API.output.outputVariables.FFApiKey>
                                  type: Inline
                            exportTerraformPlanJson: true
                            exportTerraformHumanReadablePlan: true
                          provisionerIdentifier: tf2<+pipeline.variables.gitUser>
                        timeout: 10m
                        failureStrategies:
                          - onFailure:
                              errors:
                                - AllErrors
                              action:
                                type: Retry
                                spec:
                                  retryCount: 9
                                  retryIntervals:
                                    - 5s
                                  onRetryFailure:
                                    action:
                                      type: ManualIntervention
                                      spec:
                                        timeout: 5m
                                        onTimeout:
                                          action:
                                            type: Abort
                    - step:
                        type: TerraformApply
                        name: Terraform Apply
                        identifier: TerraformApply
                        spec:
                          configuration:
                            type: InheritFromPlan
                          provisionerIdentifier: tf2<+pipeline.variables.gitUser>
                        timeout: 10m
                        failureStrategies:
                          - onFailure:
                              errors:
                                - AllErrors
                              action:
                                type: Retry
                                spec:
                                  retryCount: 9
                                  retryIntervals:
                                    - 5s
                                  onRetryFailure:
                                    action:
                                      type: ManualIntervention
                                      spec:
                                        timeout: 5m
                                        onTimeout:
                                          action:
                                            type: Abort
              - step:
                  type: ShellScript
                  name: First Deploy
                  identifier: First_Deploy
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo '{ "FFKEY": <+pipeline.stages.Automation.spec.execution.steps.Full_Automation_Monitored_Service_SLOs_Metrics_FF_Key.steps.Harness_API.output.outputVariables.FFApiKey> , "gitUser": "<+<+<+pipeline.variables.gitUser>.toLowerCase()>.replaceAll("-","_")>", "firstDeploy": "true" }'

                          curl -X POST -H 'content-type: application/json' -H 'X-Api-Key: <+secrets.getValue("diegopatharness")>' --url 'https://app.harness.io/gateway/pipeline/api/webhook/custom/v2?accountIdentifier=6_vVHzo9Qeu9fXvj-AcbCQ&orgIdentifier=default&projectIdentifier=GIT_FLOW_DEMO&pipelineIdentifier=Banking_Validation_Pipeline&triggerIdentifier=customdeploy' -d '{ "FFKEY": <+pipeline.stages.Automation.spec.execution.steps.Full_Automation_Monitored_Service_SLOs_Metrics_FF_Key.steps.Harness_API.output.outputVariables.FFApiKey> , "gitUser": "<+pipeline.variables.gitUser>", "firstDeploy": "true" }'
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
                  when:
                    stageStatus: Success
                    condition: <+pipeline.variables.triggerPipelines> == "true"
                  failureStrategies: []
        tags:
          owner: diego
          latam: ""
          banking-demo: ""
  variables:
    - name: gitUser
      type: String
      description: ""
      value: <+input>
    - name: triggerPipelines
      type: String
      default: "true"
      description: ""
      value: <+input>.allowedValues(true,false)
