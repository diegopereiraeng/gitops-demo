pipeline:
  name: CD - ASG DEPLOYMENT - BETA
  identifier: CD_ASG_DEPLOYMENT
  projectIdentifier: GIT_FLOW_DEMO
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.diegogithubapp
        repoName: java-restful-web-services
        build: <+input>
  stages:
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          caching:
            enabled: true
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: Run
                  name: Build
                  identifier: Build
                  spec:
                    connectorRef: account.DockerHubDiego
                    image: maven:3.8.1-jdk-11
                    shell: Sh
                    command: |-
                      mvn package

                      #export version=`mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | sed -n -e '/^\[.*\]/ !{ /^[0-9]/ { p; q } }'`

                      export version=`mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout`

                      export sequence=<+pipeline.sequenceId>
                    privileged: false
                    outputVariables:
                      - name: version
                      - name: sequence
                    imagePullPolicy: IfNotPresent
              - step:
                  type: Run
                  name: Create Release and Push Artifact
                  identifier: Push
                  spec:
                    connectorRef: account.DockerHubDiego
                    image: mintel/docker-alpine-bash-curl-jq:latest
                    shell: Sh
                    command: |+
                      cd target

                      service="restful-web-services"
                      version=<+execution.steps.Build.output.outputVariables.version>-<+execution.steps.Build.output.outputVariables.sequence>

                      #version="1.2.3-SNAPSHOT"

                      FILE="${service}-${version}.jar"

                      #gitAccount="diegopereiraeng"
                      gitAccount=<+pipeline.variables.git_account>
                      #repo="java-restful-web-services"
                      repo=<+pipeline.properties.ci.codebase.repoName>

                      echo "git url:  https://api.github.com/repos/${gitAccount}/${repo}/releases"

                      printf "Harness\n\nPushing to Github Releases\nFile: $FILE\nVersion: $version\nGit Account: $gitAccount\nRepo: $repo"

                      body=`echo "{\"tag_name\":\"${version}\",\"name\": \"Release Version ${version}\",\"body\": \"New Version ${version}\"}"`

                      curl --location POST "https://api.github.com/repos/${gitAccount}/${repo}/releases" -H 'Authorization: token <+secrets.getValue("account.diegogittoken")>' -H 'Content-Type: application/json' --data-raw "$body" > artifact-release.json

                      cat artifact-release.json

                      tag=`cat artifact-release.json | jq .id`

                      #tag=`curl -v -i -X POST -H "Content-Type:application/json" -H "Authorization: token <+secrets.getValue("account.diegogittoken")>" https://api.github.com/repos/${gitAccount}/${repo}/releases -d "$body" | jq .id`

                      echo "Release Version: ${version} id:$tag created with Success"

                      curl POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token <+secrets.getValue("account.diegogittoken")>" -H "Content-Type: $(file -b --mime-type $FILE)" \
                          --data-binary @$FILE https://uploads.github.com/repos/${gitAccount}/${repo}/releases/$tag/assets?name=$(basename $FILE) --header 'Content-Type: application/zip' --upload-file ${service}-<+execution.steps.Build.output.outputVariables.version>.jar 
                      echo "$FILE uploaded with success with Release id $tag"

                    privileged: false
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
        variables: []
    - stage:
        name: Build Packer
        identifier: Build_Packer
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Setup
                  identifier: Setup
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |+

                          export aws_ami_service="<+pipeline.variables.aws_ami_service>"
                          echo "artifact=Release Version <+pipeline.stages.Build.spec.execution.steps.Build.output.outputVariables.version>" 
                          export aws_ami_version="<+pipeline.stages.Build.spec.execution.steps.Build.output.outputVariables.version>" 
                          echo "triggeredBy=<+pipeline.triggeredBy.email>" 

                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
              - step:
                  type: Container
                  name: Build Packer
                  identifier: Build_Packer
                  spec:
                    connectorRef: account.DockerHubDiego
                    image: hashicorp/packer:1.9
                    command: |
                      export AWS_ACCESS_KEY_ID=<+secrets.getValue('AWS_ACCESS_KEY_ID')>
                      export AWS_SECRET_ACCESS_KEY=<+secrets.getValue('AWS_SECRET_ACCESS_KEY')>


                      cat <<EOF > build-latam-java-app.json
                      fileStore.getAsString("/packer/build-latam-java-app.json")
                      EOF

                      cat <<EOF > packages.sh
                      fileStore.getAsString("/packer/packages.sh")
                      EOF

                      export aws_ami_service="<+pipeline.variables.aws_ami_service>"
                      export artifact="Release Version <+pipeline.stages.Build.spec.execution.steps.Build.output.outputVariables.version>" 
                      export aws_ami_version="<+pipeline.stages.Build.spec.execution.steps.Build.output.outputVariables.version>" 
                      echo "triggeredBy=<+pipeline.triggeredBy.email>" 

                      packer build -var "aws_ami_service=${aws_ami_service}" -var "artifact=${artifact}" -var "aws_ami_version=${aws_ami_version}" -var "triggeredBy=<+pipeline.triggeredBy.email>" build-latam-java-app.json
                    shell: Sh
                    infrastructure:
                      type: KubernetesDirect
                      spec:
                        connectorRef: account.cddemose
                        namespace: cd-pipeline-runtime-containers
                        resources:
                          limits:
                            cpu: "0.5"
                            memory: 500Mi
                        annotations: {}
                        labels: {}
                        containerSecurityContext:
                          capabilities:
                            drop: []
                            add: []
                        nodeSelector: {}
                    outputVariables: []
                    envVariables: {}
                  timeout: 10m
        tags: {}
        when:
          pipelineStatus: Success
    - stage:
        name: Deploy ASG
        identifier: Deploy_ASG
        description: ""
        type: Deployment
        spec:
          deploymentType: Asg
          service:
            serviceRef: <+input>
            serviceInputs: <+input>
          environment:
            environmentRef: prod
            deployToAll: false
            infrastructureDefinitions: <+input>
          execution:
            steps:
              - step:
                  name: Asg Rolling Deploy
                  identifier: AsgRollingDeploy
                  type: AsgRollingDeploy
                  timeout: 10m
                  spec:
                    useAlreadyRunningInstances: false
            rollbackSteps:
              - step:
                  name: Asg Rolling Rollback
                  identifier: AsgRollingRollback
                  type: AsgRollingRollback
                  timeout: 10m
                  spec: {}
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
          condition: "false"
  variables:
    - name: git_account
      type: String
      description: ""
      value: diegopereiraeng
    - name: aws_ami_service
      type: String
      description: ""
      value: Banking-JAR
