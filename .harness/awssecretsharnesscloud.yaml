pipeline:
  name: aws-secrets-harness-cloud
  identifier: awssecretsharnesscloud
  projectIdentifier: Utilities
  orgIdentifier: SE_Sandbox
  tags: {}
  stages:
    - stage:
        name: Terraform AWS Secrets
        identifier: Terraform_AWS_Secrets
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          execution:
            steps:
              - step:
                  type: Run
                  name: AWS Secrets
                  identifier: AWS_Secrets
                  spec:
                    connectorRef: account.DockerHubDiego
                    image: diegokoala/diego-util
                    shell: Python
                    command: |
                      # Use this code snippet in your app.
                      # If you need more information about configurations
                      # or implementing the sample code, visit the AWS docs:
                      # https://aws.amazon.com/developer/language/python/

                      import boto3
                      from botocore.exceptions import ClientError


                      def get_secret():

                          secret_name = "prod/secret/mongo"
                          region_name = "us-east-2"

                          # Create a Secrets Manager client
                          session = boto3.session.Session()
                          client = session.client(
                              service_name='secretsmanager',
                              region_name=region_name
                          )

                          try:
                              get_secret_value_response = client.get_secret_value(
                                  SecretId=secret_name
                              )
                          except ClientError as e:
                              # For a list of exceptions thrown, see
                              # https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
                              raise e

                          # Decrypts secret using the associated KMS key.
                          secret = get_secret_value_response['SecretString']

                          print(secret)

                          # Your code goes here.
                    envVariables:
                      AWS_ACCESS_KEY_ID: a
                      AWS_SECRET_ACCESS_KEY: a
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
