pipeline:
  name: aws-secrets-harness-cloud
  identifier: awssecretsharnesscloud
  projectIdentifier: Utilities
  orgIdentifier: SE_Sandbox
  tags: {}
  stages:
    - stage:
        name: Terraform AWS Secrets
        identifier: Terraform_AWS_Secrets
        description: ""
        type: CI
        spec:
          cloneCodebase: false
          execution:
            steps:
              - step:
                  type: Run
                  name: AWS Secrets
                  identifier: AWS_Secrets
                  spec:
                    connectorRef: account.DockerHubDiego
                    image: diegokoala/diego-util
                    shell: Python
                    command: |-
                      # Use this code snippet in your app.
                      # If you need more information about configurations
                      # or implementing the sample code, visit the AWS docs:
                      # https://aws.amazon.com/developer/language/python/

                      import boto3
                      from botocore.exceptions import ClientError
                      import os
                      from dotenv import load_dotenv
                      import requests
                      import json

                      # Load environment variables from .env file
                      load_dotenv()

                      def create_secret( name, value, identifier, tags, description):

                          api_key = os.getenv("API_KEY")
                          account_identifier = os.getenv("ACCOUNT_IDENTIFIER")
                          org_identifier = os.getenv("ORG_IDENTIFIER")
                          project_identifier = os.getenv("PROJECT_IDENTIFIER")

                          url = "https://app.harness.io/gateway/ng/api/v2/secrets?accountIdentifier="+account_identifier+"&orgIdentifier="+org_identifier+"&projectIdentifier="+project_identifier+"&privateSecret=false"

                          headers = {
                              'Content-Type': 'application/json',
                              'x-api-key': api_key
                          }
                          
                          payload = {
                              "secret": {
                                  "type": "SecretText",
                                  "name": name,
                                  "identifier": identifier,
                                  "orgIdentifier": org_identifier,
                                  "projectIdentifier": project_identifier,
                                  "tags": tags,
                                  "description": description,
                                  "spec": {
                                      "errorMessageForInvalidYaml": "Invalid Yaml",
                                      "type": "SecretTextSpec",
                                      "secretManagerIdentifier": "harnessSecretManager",
                                      "valueType": "Inline",
                                      "value": value
                                  }
                              }
                          }

                          print(json.dumps(payload))

                          response = requests.post(url, headers=headers, json=payload)
                          response.raise_for_status()
                          data = response.json()
                          print(data)


                      def get_secret():

                          secret_name = "prod/secret/mongo"
                          region_name = "us-east-2"

                          # Create a Secrets Manager client
                          session = boto3.session.Session()
                          client = session.client(
                              service_name='secretsmanager',
                              region_name=region_name
                          )

                          try:
                              get_secret_value_response = client.get_secret_value(
                                  SecretId=secret_name
                              )
                              
                          except ClientError as e:
                              # For a list of exceptions thrown, see
                              # https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
                              raise e

                          # Decrypts secret using the associated KMS key.
                          secret_value = get_secret_value_response['SecretString']
                          # Parse the secret value into a dictionary
                          secret_dict = json.loads(secret_value)

                          

                          # identifier = os.getenv("SECRET_NAME", "change_it").replace("-","_").replace(" ","_")
                          defaul_tags = {"provisioned-by": "harness", "type": "temporary"}
                          tags = os.getenv("SECRET_TAGS", defaul_tags)
                          description = os.getenv("SECRET_DESCRIPTION", "Temp secret")
                          identifier = secret_name.replace("-","_").replace(" ","_").replace("/","_")
                          create_secret( secret_name.replace("/","_"), secret_value, identifier, tags, description)
                          os.environ['AWS_SECRETS'] = identifier

                          # Iterate over each key-value pair in the secret
                          # for key, value in secret_dict.items():
                              
                          #     print(f"Key: {key}, Value: {value}")

                          #     identifier = key.replace("-","_").replace(" ","_")
                              #create_secret( key, value, identifier, tags, description)

                          # Your code goes here.

                      # Usage
                      # name = os.getenv("SECRET_NAME", "change-it")
                      # value = os.getenv("SECRET_VALUE","change-it")
                      get_secret()
                      print( os.getenv("AWS_SECRETS", "nothing found"))
                    envVariables:
                      AWS_ACCESS_KEY_ID: <+secrets.getValue("diegoaccesskey")>
                      AWS_SECRET_ACCESS_KEY: <+secrets.getValue("diegosecretaccesskey")>
                      API_KEY: <+secrets.getValue("harness_pat")>
                      ACCOUNT_IDENTIFIER: <+secrets.getValue("harness_acc_id")>
                      ORG_IDENTIFIER: SE_Sandbox
                      PROJECT_IDENTIFIER: Utilities
                    outputVariables:
                      - name: AWS_SECRETS
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
              - step:
                  type: Run
                  name: Read Secrets Anywhere
                  identifier: Read_Secrets_Anywhere
                  spec:
                    shell: Sh
                    command: echo "<+secrets.getValue("prod_secret_mongo")>"
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
