pipeline:
  name: FAST CI-STO - SonarQube Quality Gate Plugin
  identifier: FAST_CISTO_SonarQube_Quality_Gate_Plugin
  projectIdentifier: GIT_FLOW_DEMO
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.diegogithubapp
        repoName: sonarqube-scanner
        build: <+input>
  stages:
    - stage:
        name: Build Golang
        identifier: Build_Golang
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  identifier: build_harness_sonar
                  name: Build Harness Sonar
                  spec:
                    shell: Sh
                    command: |-
                      apt-get update -y
                      apt-get install -y git

                      cd /harness
                      mkdir -p binary
                      go env GOCACHE
                      go get github.com/sirupsen/logrus
                      go get github.com/pelletier/go-toml/cmd/tomll
                      go get github.com/urfave/cli
                      go get github.com/joho/godotenv
                      GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o binary/harness-sonar
              - parallel:
                  - step:
                      type: Owasp
                      name: Owasp_Scan
                      identifier: Owasp_Scan
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          name: " <+pipeline.properties.ci.codebase.repoName>"
                          type: repository
                          variant: " <+codebase.branch> "
                        advanced:
                          log:
                            level: debug
                          fail_on_severity: critical
                          args:
                            cli: "-l odc.log  --enableExperimental"
                        imagePullPolicy: IfNotPresent
                  - step:
                      type: Sonarqube
                      name: Sonarqube_Scan
                      identifier: Sonarqube_Scan
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          name: <+pipeline.properties.ci.codebase.repoName>
                          type: repository
                          variant: <+codebase.branch>
                        advanced:
                          log:
                            level: debug
                          fail_on_severity: critical
                        imagePullPolicy: IfNotPresent
                        auth:
                          access_token: <+secrets.getValue("account.harnesssonartoken")>
                          domain: http://sonar.harness-demo.site
                          ssl: true
                        tool:
                          project_key: <+pipeline.properties.ci.codebase.repoName>
              - parallel:
                  - step:
                      type: Run
                      identifier: test
                      name: Test
                      spec:
                        shell: Sh
                        command: |-
                          go install github.com/jstemmer/go-junit-report/v2@latest
                          go test -v ./... | tee report.out
                          cat report.out | $HOME/go/bin/go-junit-report -set-exit-code > report.xml
                          reports:
                          type: JUnit
                          spec:
                        paths:
                          - report.xml
                      when:
                        stageStatus: Success
                        condition: "false"
                  - step:
                      type: Plugin
                      name: Check Sonar
                      identifier: run_sonar
                      spec:
                        connectorRef: account.DockerHubDiego
                        image: plugins/sonarqube-scanner:v2.0.3-java17
                        privileged: false
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - "**/*.xml"
                        settings:
                          sonar_host: http://sonar.harness-demo.site
                          sonar_token: <+secrets.getValue("account.harnesssonartoken")>
                          sources: /harness
                          binaries: /harness/binary
                          sonar_name: sonarqube-scanner
                          sonar_key: sonarqube-scanner
                          skip_scan: "true"
                        imagePullPolicy: Always
              - parallel:
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build And Push Java 17
                      identifier: Build_And_Push_Java_17
                      spec:
                        connectorRef: account.DockerHubDiego
                        repo: harness-cie-sonarqube-scanner
                        tags:
                          - test-java17-<+codebase.shortCommitSha>
                        dockerfile: DockerfileJava17
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build And Push Java 11
                      identifier: Build_And_Push_Java_11
                      spec:
                        connectorRef: account.DockerHubDiego
                        repo: harness-cie-sonarqube-scanner
                        tags:
                          - test-java11-<+codebase.shortCommitSha>
              - parallel:
                  - step:
                      type: AquaTrivy
                      name: AquaTrivy Java 17
                      identifier: AquaTrivy_Java_17
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          name: <+pipeline.properties.ci.codebase.repoName>
                          type: container
                          variant: "<+codebase.branch> "
                        advanced:
                          log:
                            level: debug
                          fail_on_severity: critical
                        privileged: true
                        imagePullPolicy: IfNotPresent
                        image:
                          type: docker_v2
                          name: diegokoala/harness-cie-sonarqube-scanner
                          domain: docker.io
                          tag: test-java17-<+codebase.shortCommitSha>
                  - step:
                      type: AquaTrivy
                      name: AquaTrivy Java 11
                      identifier: AquaTrivy_Java_11
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          name: <+pipeline.properties.ci.codebase.repoName>
                          type: container
                          variant: "<+codebase.branch> "
                        advanced:
                          log:
                            level: debug
                          fail_on_severity: critical
                        privileged: true
                        imagePullPolicy: IfNotPresent
                        image:
                          type: docker_v2
                          name: diegokoala/harness-cie-sonarqube-scanner
                          domain: docker.io
                          tag: test-java11-<+codebase.shortCommitSha>
