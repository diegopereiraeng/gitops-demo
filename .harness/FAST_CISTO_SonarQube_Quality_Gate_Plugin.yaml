pipeline:
  name: FAST CI-STO - SonarQube Quality Gate Plugin
  identifier: FAST_CISTO_SonarQube_Quality_Gate_Plugin
  projectIdentifier: GIT_FLOW_DEMO
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.diegogithubapp
        repoName: sonarqube-scanner
        build: <+input>
  stages:
    - stage:
        name: Build Golang
        identifier: Build_Golang
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  identifier: build_harness_sonar
                  name: Build Harness Sonar
                  spec:
                    shell: Sh
                    command: |-
                      apk add --no-cache --update git
                      cd /harness
                      mkdir -p binary
                      go env GOCACHE
                      go get github.com/sirupsen/logrus
                      go get github.com/pelletier/go-toml/cmd/tomll
                      go get github.com/urfave/cli
                      go get github.com/joho/godotenv
                      GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o binary/harness-sonar
              - parallel:
                  - step:
                      type: Plugin
                      name: Check Sonar
                      identifier: run_sonar
                      spec:
                        connectorRef: account.DockerHubDiego
                        image: plugins/sonarqube-scanner:v2.0.2-java17
                        privileged: false
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - "**/*.xml"
                        settings:
                          sonar_host: http://sonar.harness-demo.site
                          sonar_token: squ_85fe22cb008dc9b5f02104541952792fdf8596d8
                          sources: /harness
                          binaries: /harness/binary
                          sonar_name: sonarqube-scanner
                          sonar_key: sonarqube-scanner
                        imagePullPolicy: IfNotPresent
                  - step:
                      type: Owasp
                      name: Owasp_Scan
                      identifier: Owasp_Scan
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          name: " <+pipeline.properties.ci.codebase.repoName>"
                          type: repository
                          variant: " <+codebase.branch> "
                        advanced:
                          log:
                            level: debug
                          fail_on_severity: critical
                          args:
                            cli: "-l odc.log --project  <+pipeline.properties.ci.codebase.repoName>  --enableExperimental --format JSON -n --scan /harness --out /harness/owasp/output.json"
                        imagePullPolicy: IfNotPresent
              - step:
                  type: Run
                  identifier: test
                  name: Test
                  spec:
                    shell: Sh
                    command: |-
                      go install github.com/jstemmer/go-junit-report/v2@latest
                      go test -v ./... | tee report.out
                      cat report.out | $HOME/go/bin/go-junit-report -set-exit-code > report.xml
                      reports:
                      type: JUnit
                      spec:
                    paths:
                      - report.xml
                  when:
                    stageStatus: Success
                    condition: "false"
