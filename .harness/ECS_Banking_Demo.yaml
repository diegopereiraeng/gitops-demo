pipeline:
  name: ECS Banking Demo
  identifier: ECS_Banking_Demo
  projectIdentifier: GIT_FLOW_DEMO
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.diegogithubapp
        repoName: gitflow-ff-demo
        build: <+input>
  stages:
    - stage:
        name: Build Test Push Dev
        identifier: Build_Container_and_Push
        type: CI
        spec:
          cloneCodebase: true
          serviceDependencies:
            - identifier: dind
              name: dind
              type: Service
              spec:
                connectorRef: account.DockerHubDiego
                image: docker:dind
                privileged: true
                entrypoint:
                  - dockerd-entrypoint.sh
          execution:
            steps:
              - step:
                  type: RestoreCacheGCS
                  name: Restore GCS
                  identifier: Restore_GCS
                  spec:
                    connectorRef: account.SalesGCP
                    bucket: latam-cie-cache
                    key: NodeSonar
                    archiveFormat: Tar
                  when:
                    stageStatus: Success
                  failureStrategies: []
              - parallel:
                  - step:
                      type: Security
                      name: Sonar Scan Vulnerabilities
                      identifier: Sonar_Scan_Vulnerabilities
                      spec:
                        privileged: true
                        settings:
                          policy_type: manualUpload
                          scan_type: repository
                          repository_branch: <+pipeline.variables.branch>
                          product_name: sonarqube
                          product_access_token: sqa_e8b9ccf4a21f914cc88a81ed3cf80b345ed9ff16
                          product_project_name: gitflow-demo
                          product_project_key: gitflow-demo
                          product_domain: http://sonar.harness-demo.site
                          product_config_name: sonarqube-agent
                          product_lookup_type: byKey
                          repository_project: gitflow-ff-demo
                          customer_artifacts_path: /harness/tests/scan_tools/sonarqube/test_data
                          manual_upload_filename: "001"
                        imagePullPolicy: Always
                      when:
                        stageStatus: Success
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                  - step:
                      type: Security
                      name: Fortify
                      identifier: fortify
                      spec:
                        connectorRef: account.DockerHubDiego
                        privileged: true
                        settings:
                          product_name: fortify
                          product_config_name: fortify-default
                          policy_type: manualUpload
                          scan_type: repository
                          repository_project: gitflow-ff-demo
                          repository_branch: dev
                          customer_artifacts_path: /harness/tests/fortify
                          manual_upload_filename: "002"
                        imagePullPolicy: Always
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                      timeout: 15m
                  - step:
                      type: Security
                      name: Brakeman Scan
                      identifier: Brakeman_Scan
                      spec:
                        connectorRef: account.DockerHubDiego
                        privileged: true
                        settings:
                          policy_type: manualUpload
                          scan_type: repository
                          repository_project: gitflow-ff-demo
                          repository_branch: <+codebase.branch>
                          product_name: brakeman
                          product_config_name: brakeman-default
                          fail_on_severity: HIGH
                          customer_artifacts_path: /harness/tests/scan_tools/brakeman/test_data
                          manual_upload_filename: "001"
                        imagePullPolicy: Always
                      when:
                        stageStatus: Success
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      timeout: 6m
                  - step:
                      type: Security
                      name: OWASP
                      identifier: OWASP
                      spec:
                        connectorRef: account.DockerHubDiego
                        privileged: true
                        settings:
                          policy_type: manualUpload
                          scan_type: repository
                          repository_project: gitflow-ff-demo
                          repository_branch: <+codebase.branch>
                          product_name: owasp
                          product_config_name: owasp 5.x
                          fail_on_severity: HIGH
                          customer_artifacts_path: /harness/tests/scan_tools/owasp/test_data
                          manual_upload_filename: "001"
                        imagePullPolicy: Always
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                  - step:
                      type: Run
                      name: Lint Check
                      identifier: Lint_Check
                      spec:
                        connectorRef: account.DockerHubDiego
                        image: node:alpine
                        shell: Sh
                        command: |-
                          export NODE_OPTIONS="--max-old-space-size=2048"

                          mkdir -p html/reports/eslint
                          npm install

                          #ls -ltra node_modules/


                          ls html

                          ls html/reports/eslint/

                          npm run lint

                          ls html/reports/eslint/
                        privileged: false
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - "**/eslint.xml"
                        imagePullPolicy: IfNotPresent
                        resources:
                          limits:
                            memory: 2Gi
                      failureStrategies: []
                  - step:
                      type: Plugin
                      name: SonarQube Quality Gateway Check
                      identifier: SonarQube_Quality_Gateway_Check
                      spec:
                        connectorRef: account.DockerHubDiego
                        image: plugins/sonarqube-scanner:linux-amd64
                        privileged: false
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - sonarResults.xml
                        settings:
                          sonar_host: http://sonar.harness-demo.site
                          sonar_token: squ_85fe22cb008dc9b5f02104541952792fdf8596d8
                          sources: html
                          binaries: html
                          level: DEBUG
                          sonar_name: gitflow-demo
                          sonar_key: gitflow-demo
                          branch: <+pipeline.variables.branch>
                        imagePullPolicy: Always
                        resources:
                          limits:
                            memory: 2Gi
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
              - step:
                  type: Run
                  name: Build Image
                  identifier: Build_Image
                  spec:
                    connectorRef: account.DockerHubDiego
                    image: docker:latest
                    shell: Sh
                    command: |-


                      docker build . -t bankingapp:local --build-arg FFKEY=<+pipeline.variables.ffkey>

                      export tag="ecs-<+pipeline.sequenceId>"
                    outputVariables:
                      - name: tag
              - step:
                  type: Security
                  name: Aqua
                  identifier: Aqua
                  spec:
                    connectorRef: account.DockerHubDiego
                    privileged: true
                    settings:
                      product_name: aqua-trivy
                      product_config_name: aqua-trivy
                      policy_type: manualUpload
                      scan_type: container
                      container_type: local_image
                      container_domain: docker.io
                      container_project: nodegoat
                      container_tag: local
                      fail_on_severity: HIGH
                      customer_artifacts_path: /harness/tests/scan_tools/aqua_trivy/test_data
                      manual_upload_filename: "005"
                    imagePullPolicy: Always
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Ignore
                  when:
                    stageStatus: Success
              - parallel:
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Build Container and Push to Docker Hub
                      identifier: Build_Container_and_Push_to_Docker_Hub
                      spec:
                        connectorRef: account.DockerHubDiego
                        repo: diegokoala/harness-ff-bankingapp-ecs
                        tags:
                          - <+execution.steps.Build_Image.output.outputVariables.tag>
                          - ecs
                        dockerfile: Dockerfile
                        buildArgs:
                          FFKEY: <+pipeline.variables.ffkey>
                        optimize: true
                  - step:
                      type: SaveCacheGCS
                      name: Save GCS
                      identifier: Save_GCS
                      spec:
                        connectorRef: account.SalesGCP
                        bucket: latam-cie-cache
                        key: NodeSonar
                        sourcePaths:
                          - node_modules
                          - .sonar
                        archiveFormat: Tar
                      when:
                        stageStatus: Success
                      failureStrategies: []
          serviceConfig:
            serviceRef: ""
            serviceDefinition:
              type: Kubernetes
              spec:
                variables: []
          sharedPaths:
            - /var/run
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
        when:
          pipelineStatus: Success
        variables:
          - name: sto_api_key
            type: String
            value: <+secrets.getValue("account.sto_api_key")>
    - stage:
        name: Canary Deploy
        identifier: Deploy
        description: ""
        type: Deployment
        spec:
          deploymentType: ECS
          service:
            serviceRef: <+input>
            serviceInputs: <+input>
          environment:
            environmentRef: prod
            deployToAll: false
            infrastructureDefinitions:
              - identifier: ECS_SE_Cluster_Prod
          execution:
            steps:
              - stepGroup:
                  name: Canary
                  identifier: Canary
                  steps:
                    - step:
                        type: EcsCanaryDeploy
                        name: Ecs Canary Deploy
                        identifier: Ecs_Canary_Deploy
                        spec: {}
                        timeout: 10m
                    - step:
                        type: HarnessApproval
                        name: Approval
                        identifier: Approval
                        spec:
                          approvalMessage: Please review the following information and approve the pipeline progression
                          includePipelineExecutionHistory: true
                          approvers:
                            userGroups:
                              - account._account_all_users
                            minimumCount: 1
                            disallowPipelineExecutor: false
                          approverInputs: []
                        timeout: 15m
                        failureStrategies:
                          - onFailure:
                              errors:
                                - Timeout
                              action:
                                type: MarkAsSuccess
                    - step:
                        type: EcsCanaryDelete
                        name: Ecs Canary Delete
                        identifier: Ecs_Canary_Delete
                        spec: {}
                        timeout: 10m
                  when:
                    stageStatus: Success
                    condition: <+pipeline.variables.deployment_type> == "canary"
                  failureStrategies: []
                  spec: {}
              - parallel:
                  - stepGroup:
                      name: Blue Green Deployment
                      identifier: blueGreenDepoyment
                      steps:
                        - step:
                            name: ECS Blue Green Create Service
                            identifier: EcsBlueGreenCreateService
                            type: EcsBlueGreenCreateService
                            timeout: 10m
                            spec:
                              loadBalancer: <+input>
                              prodListenerRuleArn: ""
                              stageListener: <+input>
                              stageListenerRuleArn: ""
                              prodListener: <+input>
                        - step:
                            type: HarnessApproval
                            name: Shift Traffic - Green 10 - Approval
                            identifier: Shift_Traffic_Blue_90_Green_10_Approval
                            spec:
                              approvalMessage: Please review the following information and approve the pipeline progression
                              includePipelineExecutionHistory: true
                              approvers:
                                userGroups:
                                  - account._account_all_users
                                minimumCount: 1
                                disallowPipelineExecutor: false
                              approverInputs: []
                            timeout: 1d
                            when:
                              stageStatus: Success
                              condition: <+pipeline.variables.blue_green_gradually> == "yes"
                            failureStrategies: []
                        - step:
                            type: ShellScript
                            name: Shift Traffic - Blue 90 - Green 10
                            identifier: Shift_Traffic_Blue_90_Green_10
                            spec:
                              shell: Bash
                              onDelegate: true
                              source:
                                type: Inline
                                spec:
                                  script: |-

                                    #!/bin/bash

                                    # blue_weight=90
                                    # green_weight=10

                                    if [ -n "$blue_listener_arn" ] && [ -n "$blue_tg_arn" ] && [ -n "$green_tg_arn" ]; then
                                      echo "Adding Green TG to Blue Listener..."
                                      echo "Shifting $green_weight% of traffic distribution to Green TG"
                                      echo "--------------------------------"
                                      # Construct the JSON object with dynamic values
                                      json=$(jq -n \
                                        --arg tg_arn_blue "$blue_tg_arn" \
                                        --arg tg_arn_blue_weight "$blue_weight" \
                                        --arg tg_arn_green "$green_tg_arn" \
                                        --arg tg_arn_green_weight "$green_weight" \
                                        '{ 
                                          Type: "forward",
                                          Order: 1,
                                          ForwardConfig: {
                                            TargetGroups: [
                                              { TargetGroupArn: $tg_arn_blue, Weight: $tg_arn_blue_weight },
                                              { TargetGroupArn: $tg_arn_green, Weight: $tg_arn_green_weight }
                                            ],
                                            TargetGroupStickinessConfig: {
                                              Enabled: true,
                                              DurationSeconds: 10
                                            }
                                          }
                                        }')

                                      # Pass the JSON string to the modify-listener command
                                      aws elbv2 modify-listener \
                                        --listener-arn "$blue_listener_arn" \
                                        --default-actions "$json" --output text
                                      echo "Trafic Shifted Gradually - Blue: - Green: "
                                    else
                                      echo "Blue Listener or Green TG not found"
                                      exit 1
                                    fi
                              environmentVariables:
                                - name: blue_tg_arn
                                  type: String
                                  value: <+pipeline.stages.Deploy.spec.execution.steps.BG_Color_Check.ContainerStep.output.outputVariables.blue_tg>
                                - name: blue_weight
                                  type: String
                                  value: "90"
                                - name: green_tg_arn
                                  type: String
                                  value: <+pipeline.stages.Deploy.spec.execution.steps.BG_Color_Check.ContainerStep.output.outputVariables.green_tg>
                                - name: green_weight
                                  type: String
                                  value: "10"
                                - name: blue_listener_arn
                                  type: String
                                  value: <+pipeline.stages.Deploy.spec.execution.steps.BG_Color_Check.ContainerStep.output.outputVariables.listener_blue_arn>
                              outputVariables: []
                            timeout: 10m
                            when:
                              stageStatus: Success
                              condition: <+pipeline.variables.blue_green_gradually> == "yes"
                            failureStrategies: []
                        - step:
                            type: HarnessApproval
                            name: Shift Traffic - Green 50 - Approval
                            identifier: Shift_Traffic_Green_50_Approval
                            spec:
                              approvalMessage: Please review the following information and approve the pipeline progression
                              includePipelineExecutionHistory: true
                              approvers:
                                userGroups:
                                  - account._account_all_users
                                minimumCount: 1
                                disallowPipelineExecutor: false
                              approverInputs: []
                            timeout: 1d
                            when:
                              stageStatus: Success
                              condition: <+pipeline.variables.blue_green_gradually> == "yes"
                            failureStrategies: []
                        - step:
                            type: ShellScript
                            name: Shift Traffic - Blue 50 - Green 50
                            identifier: Shift_Traffic_Blue_50_Green_50
                            spec:
                              shell: Bash
                              onDelegate: true
                              source:
                                type: Inline
                                spec:
                                  script: |-

                                    #!/bin/bash

                                    # blue_weight=90
                                    # green_weight=10

                                    if [ -n "$blue_listener_arn" ] && [ -n "$blue_tg_arn" ] && [ -n "$green_tg_arn" ]; then
                                      echo "Adding Green TG to Blue Listener..."
                                      echo "Shifting $green_weight% of traffic distribution to Green TG"
                                      echo "--------------------------------"
                                      # Construct the JSON object with dynamic values
                                      json=$(jq -n \
                                        --arg tg_arn_blue "$blue_tg_arn" \
                                        --arg tg_arn_blue_weight "$blue_weight" \
                                        --arg tg_arn_green "$green_tg_arn" \
                                        --arg tg_arn_green_weight "$green_weight" \
                                        '{ 
                                          Type: "forward",
                                          Order: 1,
                                          ForwardConfig: {
                                            TargetGroups: [
                                              { TargetGroupArn: $tg_arn_blue, Weight: $tg_arn_blue_weight },
                                              { TargetGroupArn: $tg_arn_green, Weight: $tg_arn_green_weight }
                                            ],
                                            TargetGroupStickinessConfig: {
                                              Enabled: true,
                                              DurationSeconds: 10
                                            }
                                          }
                                        }')

                                      # Pass the JSON string to the modify-listener command
                                      aws elbv2 modify-listener \
                                        --listener-arn "$blue_listener_arn" \
                                        --default-actions "$json" --output text
                                      echo "Trafic Shifted Gradually - Blue: - Green: "
                                    else
                                      echo "Blue Listener or Green TG not found"
                                      exit 1
                                    fi
                              environmentVariables:
                                - name: blue_tg_arn
                                  type: String
                                  value: <+pipeline.stages.Deploy.spec.execution.steps.BG_Color_Check.ContainerStep.output.outputVariables.blue_tg>
                                - name: blue_weight
                                  type: String
                                  value: "50"
                                - name: green_tg_arn
                                  type: String
                                  value: <+pipeline.stages.Deploy.spec.execution.steps.BG_Color_Check.ContainerStep.output.outputVariables.green_tg>
                                - name: green_weight
                                  type: String
                                  value: "50"
                                - name: blue_listener_arn
                                  type: String
                                  value: <+pipeline.stages.Deploy.spec.execution.steps.BG_Color_Check.ContainerStep.output.outputVariables.listener_blue_arn>
                              outputVariables: []
                            timeout: 10m
                            when:
                              stageStatus: Success
                              condition: <+pipeline.variables.blue_green_gradually> == "yes"
                            failureStrategies: []
                        - step:
                            type: HarnessApproval
                            name: Green SWAP Approval
                            identifier: Green_Approval
                            spec:
                              approvalMessage: Please review the following information and approve the pipeline progression
                              includePipelineExecutionHistory: true
                              approvers:
                                userGroups:
                                  - account._account_all_users
                                minimumCount: 1
                                disallowPipelineExecutor: false
                              approverInputs: []
                            timeout: 1d
                        - step:
                            name: ECS Blue Green Swap Target Groups
                            identifier: EcsBlueGreenSwapTargetGroups
                            type: EcsBlueGreenSwapTargetGroups
                            timeout: 10m
                            spec: {}
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.deployment_type> == "bluegreen"
                      failureStrategies: []
                      spec: {}
                  - stepGroup:
                      name: Rolling
                      identifier: Rolling
                      steps:
                        - step:
                            type: EcsRollingDeploy
                            name: Ecs Rolling Deploy
                            identifier: Ecs_Rolling_Deploy
                            spec:
                              sameAsAlreadyRunningInstances: false
                              forceNewDeployment: true
                            timeout: 10m
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.deployment_type> == "rolling" || <+pipeline.variables.deployment_type> == "canary"
                      failureStrategies: []
                      spec: {}
              - step:
                  name: BG Color Post Check
                  identifier: BG_Color_Post_Check
                  template:
                    templateRef: BG_Color_Discovery
                    versionLabel: 1.0.0
                    templateInputs:
                      type: Container
                      spec:
                        envVariables:
                          load_balancer_name: <+pipeline.stages.Deploy.spec.execution.steps.blueGreenDepoyment.steps.EcsBlueGreenCreateService.spec.loadBalancer>
            rollbackSteps:
              - step:
                  type: EcsCanaryDelete
                  name: Ecs Canary Delete Rollback
                  identifier: Ecs_Canary_Delete_Rollback
                  spec: {}
                  timeout: 10m
              - step:
                  name: ECS Blue Green Rollback
                  identifier: EcsBlueGreenRollback
                  type: EcsBlueGreenRollback
                  timeout: 10m
                  spec: {}
              - step:
                  type: EcsBlueGreenRollback
                  name: Ecs Blue Green Rollback
                  identifier: Ecs_Blue_Green_Rollback
                  spec: {}
                  timeout: 10m
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
  variables:
    - name: tag
      type: String
      description: ""
      value: ecs
    - name: deployment_type
      type: String
      default: rolling
      description: ""
      value: <+input>.allowedValues(rolling,canary,bluegreen)
    - name: blue_green_gradually
      type: String
      default: "no"
      description: ""
      value: <+input>.allowedValues(yes,no)
    - name: blue_green_load_balancer_name
      type: String
      default: banking-app
      description: ""
      value: <+input>
